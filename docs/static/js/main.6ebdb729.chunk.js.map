{"version":3,"sources":["components/AddCategories.jsx","helpers/getGifs.jsx","components/GifGridItem.jsx","components/GifGrid.jsx","hooks/useFetchGifs.jsx","components/GifExpertApp.jsx","index.js"],"names":["AddCategories","guardarCategorias","useState","valor","guardarValor","onSubmit","e","preventDefault","trim","length","categorias","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","size","images","downsized_medium","GifGridItem","imagen","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imagenes","useFetchGifs","index","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"yMA+BeA,EA5BO,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,kBAAuB,EAEfC,mBAAS,IAFM,mBAEtCC,EAFsC,KAE/BC,EAF+B,KAgB7C,OACE,sBAAMC,SATY,SAACC,GACnBA,EAAEC,iBACEJ,EAAMK,OAAOC,OAAQ,IACvBR,GAAkB,SAAAS,GAAU,OAAKP,GAAL,mBAAeO,OAC3CN,EAAa,MAKf,SACE,uBAAOO,KAAK,OAAOC,MAAOT,EAAOU,SAdjB,SAACP,GACnBF,EAAaE,EAAEQ,OAAOF,a,+BCPbG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,4DAET,mCACNC,EAHe,iDAGkCC,UAAUH,GAH5C,6BAET,oCAFS,SAIFI,MAAMF,GAJJ,cAIfG,EAJe,gBAKAA,EAAKC,OALL,uBAKdC,EALc,EAKdA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GACrB,MAAM,CACJC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,KAAMH,EAAII,OAAOC,iBAAiBb,QAXjB,kBAedM,GAfc,4CAAH,sDCaLQ,EAZK,SAACC,GAEOA,EAAnBN,GAFwB,IAEpBC,EAAeK,EAAfL,MAAOC,EAAQI,EAARJ,KAElB,OACE,sBAAKK,UAAU,yCAAf,UACE,qBAAKC,IAAKN,EAAMO,IAAKR,IACrB,4BAAIA,QCgBKS,EArBC,SAAC,GAAiB,IAAhBrB,EAAe,EAAfA,UAAe,ECDL,SAACA,GAAe,IAAD,EAEfd,mBAAS,CACjCqB,KAAM,GACNe,SAAS,IAJ8B,mBAElCC,EAFkC,KAE3BC,EAF2B,KAmBzC,OAZAC,qBAAW,WACT1B,EAAQC,GACL0B,MAAM,SAAAC,GAEHH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAIhB,CAACtB,IAEGuB,EDhB0BK,CAAa5B,GAAlC2B,EAFmB,EAExBpB,KAAee,EAFS,EAETA,QAEtB,OACE,qCACE,oBAAIJ,UAAU,oCAAd,SAAmDlB,IAElDsB,GAAW,mBAAGJ,UAAU,mCAAb,yBAEZ,qBAAKA,UAAU,YAAf,SAEIS,EAASlB,KAAM,SAACQ,EAAQY,GAAT,OACb,cAAC,EAAD,eAA4CZ,GAA5C,UAAqBA,EAArB,YAA+BY,aEW5BC,EAxBM,WAAM,MAIe5C,mBAAS,CAAC,cAJzB,mBAIlBQ,EAJkB,KAINT,EAJM,KAMzB,OACE,mCACE,8CAEE,uBACA,cAAC,EAAD,CAAeA,kBAAmBA,IAClC,6BAEIS,EAAWe,KAAK,SAACT,EAAW6B,GAAZ,OACd,cAAC,EAAD,CAAqB7B,UAAaA,GAApB6B,c,MCZ5BE,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.6ebdb729.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\n\nconst AddCategories = ({guardarCategorias}) => {\n\n  const [valor, guardarValor] = useState('');\n\n  const cambioValor = (e) => {\n    guardarValor(e.target.value);\n  }\n\n  const handleSubmit= (e) => {\n    e.preventDefault();\n    if (valor.trim().length >2){\n      guardarCategorias(categorias => [valor, ...categorias]);\n      guardarValor('');\n    }\n  }\n\n  return ( \n    <form onSubmit={handleSubmit}>\n      <input type=\"text\" value={valor} onChange={cambioValor}/>\n      {/* <button>AÃ±adir</button> */}\n    </form>\n   );\n}\n\nAddCategories.propTypes = {\n  guardarCategorias: PropTypes.func.isRequired\n}\n \nexport default AddCategories;","\nexport const getGifs = async(categoria) => {\n\n  const API = 'FB2bo3pXIvjKkcx3fY7AKyBuZY6ukPxj'\n  const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(categoria)}&limit=10&api_key=${API}`;\n  const resp = await fetch(url);\n  const {data} = await resp.json();\n  \n  const gifs = data.map (img => {\n    return{\n      id: img.id,\n      title: img.title,\n      size: img.images.downsized_medium.url\n    }\n  })\n\n  return gifs;\n\n}","import React from 'react';\n\nconst GifGridItem = (imagen) => {\n  \n  const {id, title, size} = imagen;\n  \n  return ( \n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={size} alt={title}/>\n      <p>{title}</p>\n    </div>\n   );\n}\n \nexport default GifGridItem;","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport GifGridItem from './GifGridItem';\n\nconst GifGrid = ({categoria}) => {\n\n  const {data:imagenes, loading} = useFetchGifs(categoria);\n\n  return ( \n    <>\n      <h4 className=\"animate__animated animate__fadeIn\">{categoria}</h4>\n      \n      {loading && <p className=\"animate__animated animate__flash\">Cargando...</p>}\n      \n      <div className=\"card-grid\">\n        {\n          imagenes.map ( (imagen, index) => (\n            <GifGridItem key={`${imagen}-${index}`} {...imagen}/>\n          ))\n        }\n      </div>\n    </>\n   );\n}\n \nexport default GifGrid;","import {useState, useEffect} from 'react';\nimport {getGifs} from '../helpers/getGifs'\n\nexport const useFetchGifs = (categoria) => {\n  \n  const [state, setstate] = useState({\n    data: [],\n    loading: true\n  });\n\n  useEffect( () => {\n    getGifs(categoria)\n      .then( imagenes => {\n\n          setstate({\n            data: imagenes,\n            loading: false\n          })\n\n      } );\n  }, [categoria]);\n\n  return state; //{data: [], loading: true}\n\n}\n","import React, {useState} from 'react';\nimport AddCategories from './AddCategories';\nimport GifGrid from './GifGrid';\n\nconst GifExpertApp = () => {\n\n  //const categorias = ['One Punch', 'Samurai shadow', 'Dragon Ball'];\n\n  const [categorias, guardarCategorias] = useState(['One punch']);\n\n  return ( \n    <>\n      <h2>\n        GifExpertApp\n        <hr/>\n        <AddCategories guardarCategorias={guardarCategorias}/>\n        <ul>\n          {\n            categorias.map( (categoria, index) => \n              <GifGrid key={index} categoria = {categoria}/>\n            )\n          }\n        </ul>\n      </h2>\n    </>\n   );\n}\n \nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\n\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}